// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, full_name, phone_number, password_hash)
VALUES ($1, $2, $3, $4)
RETURNING id, full_name, email, phone_number, password_hash, is_verified, paystack_customer_id, created_at, updated_at
`

type CreateUserParams struct {
	Email        pgtype.Text `json:"email"`
	FullName     string      `json:"full_name"`
	PhoneNumber  string      `json:"phone_number"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.FullName,
		arg.PhoneNumber,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.IsVerified,
		&i.PaystackCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec

DELETE FROM users
WHERE id = $1
`

// -- name: UpdateUser :one
// This query is commented out because it updates manually but I have associated trigger
// that automatically updates the `updated_at` field on any update.
// UPDATE users
// SET name = $2, email = $3, updated_at = NOW()
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, full_name, email, phone_number, password_hash, is_verified, paystack_customer_id, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.IsVerified,
		&i.PaystackCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, phone_number, password_hash, is_verified, paystack_customer_id, created_at, updated_at FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.IsVerified,
		&i.PaystackCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, email, phone_number, password_hash, is_verified, paystack_customer_id, created_at, updated_at FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.PasswordHash,
			&i.IsVerified,
			&i.PaystackCustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name = $2, email = $3
WHERE id = $1
RETURNING id, full_name, email, phone_number, password_hash, is_verified, paystack_customer_id, created_at, updated_at
`

type UpdateUserParams struct {
	ID       uuid.UUID   `json:"id"`
	FullName string      `json:"full_name"`
	Email    pgtype.Text `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.FullName, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.IsVerified,
		&i.PaystackCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
